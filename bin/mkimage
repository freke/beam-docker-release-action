#!/usr/bin/env escript
%% -*- erlang -*-
%% Copyright (c) 2012-2023 Peter Morgan <peter.james.morgan@gmail.com>
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%% http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%


-module(mkimage).


-include_lib("kernel/include/file.hrl").
-mode(compile).


main([]) ->
    Build = configuration(build),

    ?FUNCTION_NAME(
         lists:foldl(
           fun
               (Key, A) ->
                   A#{Key => configuration(Key, Build)}
           end,
           #{build => Build},
           [application, release, erts]));

main(Configuration) ->
    output(Configuration),
    %% erlang:open_port({spawn, ...}) requires /bin/sh
    copy_bin(["/bin/sh"], Configuration),
    strip(Configuration),
    copy_dependent_so(Configuration),
    copy_ld_linux_so(Configuration),
    link_erts(Configuration),
    link_release(Configuration).


output(Configuration) ->
    ?FUNCTION_NAME(maps:iterator(Configuration), []).

output(I0, Path) ->
    case maps:next(I0) of
        {Key, Value, I1} when is_map(Value) ->
            ?FUNCTION_NAME(maps:iterator(Value), [Key | Path]),
            ?FUNCTION_NAME(I1, Path);

        {Key, Value, I1} ->
            set_output([Key | Path], Value),
            ?FUNCTION_NAME(I1, Path);

        none ->
            ok
    end.


configuration(application, Build) ->
    {ok, [{application, Name, Properties}]} = file:consult(app(Build)),
    #{name => Name, properties => proplists:to_map(Properties)};

configuration(release, Build) ->
    {release, {Name, Version}, _} = proplists:lookup(release, relx(Build)),
    #{name => Name, version => Version};

configuration(erts, _Build) ->
    #{version => erlang:system_info(version)}.


configuration(build) ->
    case lists:foldl(
           fun
               (Filename, A) ->
                   A#{Filename => filelib:is_file(Filename)}
           end,
           #{},
           ["erlang.mk",
            "Makefile",
            "relx.config",
            "rebar.config",
            "mix.exs",
            "_rel",
            "_build"]) of

        #{"_rel" := true, "Makefile" := true, "erlang.mk" := true} ->
            #{name => erlang_mk, prefix => "_rel"};

        #{"_build" := true, "rebar.config" := true} ->
            #{name => rebar, prefix => "_build/default/rel"};

        #{"_build" := true, "mix.exs" := true} ->
            #{name => mix, prefix => filename:join(["_build", mix_env(), "rel"])}
    end.


relx(#{name := erlang_mk}) ->
    {ok, Relx} = file:consult("relx.config"),
    Relx;

relx(#{name := mix, prefix := Prefix}) ->
    ["_build",
     _,
     "rel",
     Name,
     "releases",
     Version] = filename:split(
                  lists:filter(
                    fun filelib:is_dir/1,
                    filelib:wildcard(
                      filename:join(
                        Prefix,
                        "*/releases/*")))),
    [{release, {Name, Version}, undefined}];


relx(#{name := rebar}) ->
    {ok, RebarConfig} = file:consult("rebar.config"),
    {relx, Relx} = proplists:lookup(relx, RebarConfig),
    Relx.


app(#{name := erlang_mk}) ->
    [Filename] = filelib:wildcard("ebin/*.app"),
    Filename;

app(#{name := mix}) ->
    ["_build", _, "rel", Release] = filename:split(filelib:wildcard("_build/*/rel/*")),
    [Filename] = filelib:wildcard(filename:join(
                                    ["_build/*/rel/*/lib",
                                     Release ++ "-*",
                                     "ebin/*.app"])),
    Filename;

app(#{name := rebar}) ->
    [Filename] = filelib:wildcard("src/*.app.src"),
    Filename.


copy_bin(Binaries,
         #{build := #{prefix := Prefix},
           release := #{name := Release}}) ->
    BinDir = filename:join([Prefix, Release, "bin"]),

    lists:foreach(
      fun
          (Source) ->

              {ok, SourceInfo} = file:read_link_info(Source),

              Destination = filename:join(
                              BinDir,
                              filename:basename(Source)),

              debug(Source ++ " -> " ++ Destination),

              {ok, _} = file:copy(Source, Destination),

              {ok, DestinationInfo} = file:read_link_info(Destination),

              ok = file:write_file_info(
                     Destination,
                     DestinationInfo#file_info{mode = SourceInfo#file_info.mode})

      end,
      Binaries).


strip(#{build := #{prefix := Prefix},
        release := #{name := Release},
        erts := #{version := ERTS}}) ->
    {ok, MP} = re:compile("not stripped"),
    lists:foreach(
      fun
          (Filename) ->
              [] = os:cmd("/usr/bin/strip " ++ Filename),
              debug(Filename ++ ", stripped.")
      end,
      lists:filter(
        fun
            (Filename) ->
                nomatch /= re:run(os:cmd("/usr/bin/file " ++ Filename), MP)
        end,
        filelib:wildcard(
          filename:join([Prefix,
                         Release,
                         "erts-" ++ ERTS,
                         "bin",
                         "*"])))).


copy_dependent_so(Configuration) ->
    ?FUNCTION_NAME(Configuration, dependent_so(Configuration)).


copy_dependent_so(#{build := #{prefix := Prefix},
                    release := #{name := Release}} = Configuration,
                  [Source | Sources]) ->
    {ok, SourceInfo} = file:read_file_info(Source),
    Destination = filename:join([Prefix, Release, tl(Source)]),
    ok = filelib:ensure_dir(Destination),
    {ok, _} = file:copy(Source, Destination),
    {ok, DestinationInfo} = file:read_link_info(Destination),
    ok = file:write_file_info(
           Destination,
           DestinationInfo#file_info{mode = SourceInfo#file_info.mode}),
    debug(Source ++ ", copied."),
    ?FUNCTION_NAME(Configuration, Sources);

copy_dependent_so(_, []) ->
    ok.


dependent_so(#{build := #{prefix := Prefix},
               release := #{name := Release},
               erts := #{version := ERTS}}) ->
    lists:usort(
      lists:append(
        lists:flatmap(
          fun ldd/1,
          [filename:join(
             [Prefix,
              Release,
              "erts-" ++ ERTS,
              "bin",
              "*"]),

           filename:join(
             [Prefix,
              Release,
              "bin",
              "*"]),

           filename:join(
             [Prefix,
              Release,
              "lib/*/priv/**"])]),

        lists:flatmap(
          fun
              (SharedObject) ->
                  [SharedObject | ldd(SharedObject)]
          end,
          filelib:wildcard("/lib/*/libnss*.so.*")))).


ldd(Wildcard) ->
    debug("ldd wildcard: " ++ Wildcard),

    lists:flatmap(
      fun
          (Filename) ->
              {ok, MP} = re:compile("=> (.+) \\(", [multiline]),

              case re:run(
                     os:cmd("/usr/bin/ldd " ++ Filename),
                     MP,
                     [global, {capture, all_but_first, list}]) of

                  {match, Matches} ->
                      [Library || [Library] <- Matches];

                  nomatch ->
                      []
              end
      end,
      filelib:wildcard(Wildcard)).


copy_ld_linux_so(Configuration) ->
    copy_dependent_so(Configuration, filelib:wildcard("/lib*/ld-linux*.so.*")).


link_erts(#{build := #{prefix := Prefix},
            release := #{name := Release},
            erts := #{version := ERTS}}) ->
    make_symlink(
      "erts-" ++ ERTS,
      filename:join([Prefix, Release, "erts"])).


link_release(#{build := #{prefix := Prefix},
               release := #{name := Release,
                            version := Version}}) ->
    make_symlink(
      filename:join(["releases", Version]),
      filename:join([Prefix,
                     Release,
                     "release"])),

    make_symlink(
      filename:join([Prefix, Release]),
      "_image").


make_symlink(Existing, New) ->
    case file:make_symlink(Existing, New) of
        ok ->
            ok;

        {error, eexist} ->
            ok
    end.


set_output(Path, Value) when is_atom(Value) ->
    io:format("::set-output name=~s::~s~n", [path(Path), Value]);

set_output(_, []) ->
    nop;

set_output(Path, Value) ->
    case io_lib:printable_list(Value) of
        true ->
            io:format("::set-output name=~s::~s~n", [path(Path), Value]);

        false ->
            nop
    end.


path(Path) ->
    lists:concat(
      lists:join(
        ".",
        lists:reverse(Path))).


debug(Message) ->
    io:format("::debug::~p~n", [Message]).


mix_env() ->
    os:getenv("MIX_ENV", "dev").
